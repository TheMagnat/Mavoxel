
#pragma once

#include <GraphicObjects/DrawableSingle.hpp>


namespace mav {

    enum class SceneType {
        RAY_TRACING,
        FILTER
    };

    enum class OwnedTextureType {
        COPY,
    };

    struct OwnedTextureInformation {
        OwnedTextureType type;
        int rendererIndex;
        int textureIndex;
    };

    //Should filled by the user
    struct SceneWrapper {

        SceneWrapper(mav::DrawableSingle* scene_p, SceneType sceneType_p, std::optional<std::vector<OwnedTextureInformation>> ownedTextures_p = std::nullopt)
            : scene(scene_p), sceneType(sceneType_p), ownedTextures(ownedTextures_p) {}

        mav::DrawableSingle* scene;
        SceneType sceneType;
        std::optional< std::vector<OwnedTextureInformation> > ownedTextures; 

    };

    //Should be generated by the render chain handler
    struct DrawableInformation {

        DrawableInformation(SceneWrapper const& sceneWrapper_p, int rendererInIndex_p, int rendererIndex_p, std::optional<glm::uvec2> outputResolution_p) :
            drawable(sceneWrapper_p.scene), rendererInIndex(rendererInIndex_p), rendererIndex(rendererIndex_p), sceneType(sceneWrapper_p.sceneType), outputResolution(outputResolution_p), ownedTextures(sceneWrapper_p.ownedTextures) {}

        mav::DrawableSingle* drawable;
        int rendererInIndex; //Renderer input
        int rendererIndex; //Renderer output
        SceneType sceneType;
        std::optional<glm::uvec2> outputResolution;
        std::optional<std::vector<OwnedTextureInformation>> ownedTextures; 
    };

}
